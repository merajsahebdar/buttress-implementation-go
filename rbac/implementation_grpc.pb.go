// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rbac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RbacServiceClient is the client API for RbacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacServiceClient interface {
	// Instance management
	EnsureRbacInstance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Subjects Management
	AddChildSubjectToParentSubject(ctx context.Context, in *AddChildSubjectToParentSubjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveChildSubjectFromParentSubject(ctx context.Context, in *RemoveChildSubjectFromParentSubjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveSubject(ctx context.Context, in *RemoveSubjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Policies Management
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CreatePolicies(ctx context.Context, in *CreatePoliciesRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemovePolicies(ctx context.Context, in *RemovePoliciesRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Permissions Check
	HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error)
}

type rbacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacServiceClient(cc grpc.ClientConnInterface) RbacServiceClient {
	return &rbacServiceClient{cc}
}

func (c *rbacServiceClient) EnsureRbacInstance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/EnsureRbacInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) AddChildSubjectToParentSubject(ctx context.Context, in *AddChildSubjectToParentSubjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/AddChildSubjectToParentSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) RemoveChildSubjectFromParentSubject(ctx context.Context, in *RemoveChildSubjectFromParentSubjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/RemoveChildSubjectFromParentSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) RemoveSubject(ctx context.Context, in *RemoveSubjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/RemoveSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) CreatePolicies(ctx context.Context, in *CreatePoliciesRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/CreatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) RemovePolicies(ctx context.Context, in *RemovePoliciesRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/RemovePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error) {
	out := new(HasPermissionResponse)
	err := c.cc.Invoke(ctx, "/buttress.RbacService/HasPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServiceServer is the server API for RbacService service.
// All implementations must embed UnimplementedRbacServiceServer
// for forward compatibility
type RbacServiceServer interface {
	// Instance management
	EnsureRbacInstance(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// Subjects Management
	AddChildSubjectToParentSubject(context.Context, *AddChildSubjectToParentSubjectRequest) (*EmptyResponse, error)
	RemoveChildSubjectFromParentSubject(context.Context, *RemoveChildSubjectFromParentSubjectRequest) (*EmptyResponse, error)
	RemoveSubject(context.Context, *RemoveSubjectRequest) (*EmptyResponse, error)
	// Policies Management
	CreatePolicy(context.Context, *CreatePolicyRequest) (*EmptyResponse, error)
	RemovePolicy(context.Context, *RemovePolicyRequest) (*EmptyResponse, error)
	CreatePolicies(context.Context, *CreatePoliciesRequest) (*EmptyResponse, error)
	RemovePolicies(context.Context, *RemovePoliciesRequest) (*EmptyResponse, error)
	// Permissions Check
	HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error)
	mustEmbedUnimplementedRbacServiceServer()
}

// UnimplementedRbacServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRbacServiceServer struct {
}

func (UnimplementedRbacServiceServer) EnsureRbacInstance(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureRbacInstance not implemented")
}
func (UnimplementedRbacServiceServer) AddChildSubjectToParentSubject(context.Context, *AddChildSubjectToParentSubjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChildSubjectToParentSubject not implemented")
}
func (UnimplementedRbacServiceServer) RemoveChildSubjectFromParentSubject(context.Context, *RemoveChildSubjectFromParentSubjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChildSubjectFromParentSubject not implemented")
}
func (UnimplementedRbacServiceServer) RemoveSubject(context.Context, *RemoveSubjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubject not implemented")
}
func (UnimplementedRbacServiceServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedRbacServiceServer) RemovePolicy(context.Context, *RemovePolicyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedRbacServiceServer) CreatePolicies(context.Context, *CreatePoliciesRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicies not implemented")
}
func (UnimplementedRbacServiceServer) RemovePolicies(context.Context, *RemovePoliciesRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicies not implemented")
}
func (UnimplementedRbacServiceServer) HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermission not implemented")
}
func (UnimplementedRbacServiceServer) mustEmbedUnimplementedRbacServiceServer() {}

// UnsafeRbacServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacServiceServer will
// result in compilation errors.
type UnsafeRbacServiceServer interface {
	mustEmbedUnimplementedRbacServiceServer()
}

func RegisterRbacServiceServer(s grpc.ServiceRegistrar, srv RbacServiceServer) {
	s.RegisterService(&RbacService_ServiceDesc, srv)
}

func _RbacService_EnsureRbacInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).EnsureRbacInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/EnsureRbacInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).EnsureRbacInstance(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_AddChildSubjectToParentSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChildSubjectToParentSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).AddChildSubjectToParentSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/AddChildSubjectToParentSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).AddChildSubjectToParentSubject(ctx, req.(*AddChildSubjectToParentSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_RemoveChildSubjectFromParentSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChildSubjectFromParentSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).RemoveChildSubjectFromParentSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/RemoveChildSubjectFromParentSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).RemoveChildSubjectFromParentSubject(ctx, req.(*RemoveChildSubjectFromParentSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_RemoveSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).RemoveSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/RemoveSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).RemoveSubject(ctx, req.(*RemoveSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).RemovePolicy(ctx, req.(*RemovePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_CreatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).CreatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/CreatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).CreatePolicies(ctx, req.(*CreatePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_RemovePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).RemovePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/RemovePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).RemovePolicies(ctx, req.(*RemovePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_HasPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).HasPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buttress.RbacService/HasPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).HasPermission(ctx, req.(*HasPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacService_ServiceDesc is the grpc.ServiceDesc for RbacService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buttress.RbacService",
	HandlerType: (*RbacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureRbacInstance",
			Handler:    _RbacService_EnsureRbacInstance_Handler,
		},
		{
			MethodName: "AddChildSubjectToParentSubject",
			Handler:    _RbacService_AddChildSubjectToParentSubject_Handler,
		},
		{
			MethodName: "RemoveChildSubjectFromParentSubject",
			Handler:    _RbacService_RemoveChildSubjectFromParentSubject_Handler,
		},
		{
			MethodName: "RemoveSubject",
			Handler:    _RbacService_RemoveSubject_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _RbacService_CreatePolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _RbacService_RemovePolicy_Handler,
		},
		{
			MethodName: "CreatePolicies",
			Handler:    _RbacService_CreatePolicies_Handler,
		},
		{
			MethodName: "RemovePolicies",
			Handler:    _RbacService_RemovePolicies_Handler,
		},
		{
			MethodName: "HasPermission",
			Handler:    _RbacService_HasPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac/implementation.proto",
}
